name: Continuous Integration

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'package-lock.json'
      - 'requirements.txt'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install backend dependencies
        working-directory: src/backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: src/web
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend linting
        working-directory: src/backend
        run: |
          npm run lint
          npm run format:check

      - name: Run frontend linting
        working-directory: src/web
        run: |
          npm run lint
          npm run format:check

      - name: Run Python linting
        run: |
          pip install flake8 black
          flake8 src/ai_engine
          black --check src/ai_engine

      - name: Run backend tests
        working-directory: src/backend
        run: |
          npm run test:coverage
          npm run test:integration

      - name: Run frontend tests
        working-directory: src/web
        run: npm run test:coverage

      - name: Run AI engine tests
        run: |
          python -m pytest tests/ai_engine --cov=src/ai_engine --cov-report=xml

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            src/backend/coverage
            src/web/coverage
            coverage.xml

      - name: Run security scan - npm
        run: |
          npm audit --production
          npm audit --production --workspaces

      - name: Run security scan - Python
        run: |
          pip install safety
          safety check

      - name: Run SAST analysis
        run: |
          npm install -g njsscan
          njsscan src/
          
      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: '‚ùå CI pipeline failed. Please check the logs for details.'
            })

env:
  NODE_ENV: test
  PYTHON_ENV: test
  CI: true