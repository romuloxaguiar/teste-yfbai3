version: '3.8'

services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/meeting_minutes
      - LOG_LEVEL=debug
      - CORS_ORIGIN=*
      - METRICS_ENABLED=true
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
      - ./api-gateway/.vscode:/app/.vscode
    depends_on:
      - redis
      - postgres
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meeting_minutes_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=all
      - MODEL_PATH=/app/models
      - LOG_LEVEL=DEBUG
      - METRICS_ENABLED=true
    volumes:
      - ./ai-engine:/app
      - ./ai-engine/models:/app/models
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meeting_minutes_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - meeting_minutes_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=meeting_minutes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - meeting_minutes_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - meeting_minutes_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - meeting_minutes_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  meeting_minutes_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16