import React from 'react'; // ^18.0.0
import { EmailContainer, EmailBody, EmailFooter } from './styles';
import { Header } from './Header';
import Summary from './Summary';
import type { WebMinutes } from '../../types/minutes.types';

/**
 * Props interface for Layout component with enhanced validation
 */
interface EmailLayoutProps {
  /** Meeting title with required validation */
  title: string;
  /** Meeting date and time with timezone handling */
  date: Date;
  /** Meeting organizer details with fallback */
  organizer: {
    name: string;
    email: string;
    fallbackName?: string;
  };
  /** Validated meeting minutes data */
  minutes: WebMinutes;
  /** Optional email client type for compatibility */
  emailClient?: 'outlook' | 'gmail' | 'apple' | 'other';
}

/**
 * Enhanced email template layout component that provides consistent structure
 * and styling following Microsoft Teams design system across different email clients.
 * Implements accessibility features and fallback handling.
 */
const Layout: React.FC<EmailLayoutProps> = ({
  title,
  date,
  organizer,
  minutes,
  emailClient = 'other'
}) => {
  // Validate required props
  if (!title?.trim() || !date || !organizer?.email || !minutes) {
    console.error('Required props missing in Layout component');
    return null;
  }

  return (
    <EmailContainer
      role="article"
      aria-label="Meeting Minutes"
      dir="auto" // Support RTL languages
    >
      {/* MSO conditional comments for Outlook compatibility */}
      {`<!--[if mso]>
        <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="width:100%;">
          <tr><td>
      <![endif]-->`}

      {/* Header section with branding and meeting metadata */}
      <Header
        title={title}
        date={date}
        organizer={{
          name: organizer.name || organizer.fallbackName || 'Meeting Organizer',
          email: organizer.email
        }}
      />

      {/* Main content section with enhanced accessibility */}
      <EmailBody
        role="main"
        aria-label="Meeting Content"
      >
        {/* Meeting summary section */}
        <Summary minutes={minutes} />

        {/* Topics section */}
        <section role="region" aria-label="Meeting Topics">
          {minutes.topics.map((topic) => (
            <div key={topic.id}>
              <h2>{topic.title}</h2>
              <p>{topic.content}</p>
              {topic.subtopics?.map((subtopic) => (
                <div key={subtopic.id} style={{ marginLeft: '20px' }}>
                  <h3>{subtopic.title}</h3>
                  <p>{subtopic.content}</p>
                </div>
              ))}
            </div>
          ))}
        </section>

        {/* Action items section */}
        <section role="region" aria-label="Action Items">
          <h2>Action Items</h2>
          {minutes.actionItems.map((item) => (
            <div key={item.id}>
              <p>• {item.description} - Assigned to: {item.assigneeId}</p>
              {item.dueDate && (
                <p style={{ marginLeft: '20px' }}>
                  Due: {item.dueDate.toLocaleDateString()}
                </p>
              )}
            </div>
          ))}
        </section>

        {/* Decisions section */}
        <section role="region" aria-label="Decisions">
          <h2>Decisions</h2>
          {minutes.decisions.map((decision) => (
            <div key={decision.id}>
              <p>• {decision.description}</p>
              <p style={{ marginLeft: '20px' }}>
                Made by: {decision.madeBy} at {decision.timestamp.toLocaleTimeString()}
              </p>
            </div>
          ))}
        </section>
      </EmailBody>

      {/* Footer section with support information */}
      <EmailFooter role="contentinfo">
        <p>Generated by Automated Meeting Minutes System</p>
        <p>
          Need help? Contact{' '}
          <a href="mailto:support@meetingminutes.com" style={{ color: '#0078d4' }}>
            support@meetingminutes.com
          </a>
        </p>
      </EmailFooter>

      {/* Close MSO conditional wrapper */}
      {`<!--[if mso]>
          </td></tr>
        </table>
      <![endif]-->`}
    </EmailContainer>
  );
};

// Set display name for debugging
Layout.displayName = 'EmailLayout';

export default Layout;
export type { EmailLayoutProps };